name: CI
on:
  workflow_dispatch:
    inputs:
      debug-build:
        type: boolean
        description: "Build in debug mode instead of release"
      full-lto:
        type: boolean
        description: "Whether to enable full LTO"

  push:
    branches-ignore:
      - main
    paths-ignore:
      - '.github/workflows/release.yaml'
      - '.github/ISSUE_TEMPLATE/**'
      - 'patches-contrib/**'
      - 'LICENSE'
      - '**/*.md'
      - 'README.md'

  pull_request:
    paths-ignore:
      - '.github/workflows/release.yaml'
      - '.github/__release_template.txt'
      - 'patches-contrib/**'
      - 'LICENSE'
      - '**/*.md'
      - 'README.md'

env:
  progname: "magiskboot"

permissions:
  contents: read

jobs:
  vars:
    name: Prepare (variables)
    runs-on: ubuntu-latest
    permissions:
      contents: none
    outputs:
      short_sha: ${{ steps.get_short_sha.outputs.SHORT_SHA }}
      cmake_build_type: ${{ steps.detect_build_type.outputs.CMAKE_BUILD_TYPE }}
      build_type: ${{ steps.detect_build_type.outputs.BUILD_TYPE }}
      full_lto: ${{ steps.determine_lto_type.outputs.FULL_LTO }}
      lto_ldflags: ${{ steps.determine_lto_type.outputs.LTO_LDFLAGS }}

    steps:
      - name: Determine short Git commit SHA
        id: get_short_sha
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c 1-7`" | tee -a $GITHUB_OUTPUT

      - name: Detect build types
        id: detect_build_type
        run: |
          CMAKE_BUILD_TYPE=Release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.debug-build }}" == "true" ]]; then
              CMAKE_BUILD_TYPE=Debug
            fi
          fi
          echo "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}" | tee -a $GITHUB_OUTPUT
          echo "BUILD_TYPE=${CMAKE_BUILD_TYPE,,}" | tee -a $GITHUB_OUTPUT

      - name: Determine LTO type
        id: determine_lto_type
        run: |
          FULL_LTO=OFF
          LTO_LDFLAGS=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.full-lto }}" == "true" ]]; then
              FULL_LTO=ON
              LTO_LDFLAGS="-flto"
            fi
          fi
          echo "FULL_LTO=${FULL_LTO}" | tee -a $GITHUB_OUTPUT
          echo "LTO_LDFLAGS=${LTO_LDFLAGS}" | tee -a $GITHUB_OUTPUT

  src:
    name: Prepare (source)
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --no-install-suggests patch cmake ninja-build

      - name: Prepare (Git)
        run: |
          git config --global user.email "user@example.com"
          git config --global user.name "Example user"

      - name: Prepare (checkout)
        uses: actions/checkout@v4

      - name: Prepare (submodule)
        run: |
          ./scripts/clone_submodules.sh

          for _repo in $(git submodule foreach --recursive --quiet 'env'); do
            git config --global --add safe.directory "$_repo"
          done
          unset _repo

      - name: Package source
        run: |
          CC=true cmake -B build -G Ninja -DCMAKE_C_COMPILER_WORKS=YES -DWITHOUT_BUILD=ON
          cmake --build build -t package_source -v

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: srcpkg
          if-no-files-found: error
          path: ${{ github.workspace }}/build/magiskboot_*-src.tar.xz
          
  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    permissions:
      actions: write
    needs: [vars]
    env:
      MSYS: "winsymlinks:native"

      msystem: CLANG64
      note: "ucrt-x86_64-standalone"
      upload_prefix: "windows-mingw-w64"

    steps:
      - name: Prepare
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ env.msystem }}
          update: true
          # installing vim for xxd
          install: >-
            base-devel file wget vim
          pacboy: >-
            xz:p lz4:p bzip2:p zlib:p pkgconf:p clang:p
            lld:p cmake:p libc++:p ninja:p rust:p

      - name: Synchronize (source)
        uses: yogeshlonkar/wait-for-jobs@v0.2.1
        with:
          jobs: 'Prepare (source)'

      - name: Prepare (source)
        uses: actions/download-artifact@v4
        with:
          name: srcpkg

      - name: Build
        shell: msys2 {0}
        run: |
          echo -e "\n### extract source ###\n"
          tar -xf magiskboot_*-src.tar.xz

          cd magiskboot_*-src/

          echo -e "\n### configure ###\n"
          CC=clang CXX=clang++ cmake -G Ninja -B build \
              -DCMAKE_BUILD_TYPE=${{ needs.vars.outputs.cmake_build_type }} \
              -DCMAKE_EXE_LINKER_FLAGS=" ${{ needs.vars.outputs.lto_ldflags }}" \
              -DPREFER_STATIC_LINKING=ON -DFULL_RUST_LTO=${{ needs.vars.outputs.full_lto }}

          echo -e "\n### build ###\n"
          cmake --build build -j $(nproc) -v
          strip build/magiskboot*.exe

          file build/magiskboot*.exe
          ldd build/magiskboot*.exe
          ./build/magiskboot*.exe || true
          rm -rf $GITHUB_WORKSPACE/${{ env.progname }}-out && mkdir -p $GITHUB_WORKSPACE/${{ env.progname }}-out
          cp -afv build/magiskboot*.exe $GITHUB_WORKSPACE/${{ env.progname }}-out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ env.progname }}-${{ needs.vars.outputs.short_sha }}-${{ needs.vars.outputs.build_type }}-${{ env.upload_prefix }}-${{ env.note }}
          path: ${{ github.workspace }}/${{ env.progname }}-out/magiskboot*.exe

      - name: Check
        shell: msys2 {0}
        run: |
          cd magiskboot_*-src/
          find $GITHUB_WORKSPACE/${{ env.progname }}-out -name magiskboot\*.exe -exec ./scripts/magiskboot_test.sh {} +

      # Fail fast
      - name: Cancel other jobs
        if: failure()
        uses: andymckay/cancel-action@0.4

